import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Sidkonfiguration
st.set_page_config(
    page_title="Vad avg√∂r priset p√• en diamant?",
    page_icon="üíé",
    layout="wide",
    initial_sidebar_state="expanded"
)

@st.cache_data
def load_data():
    with st.spinner("Laddar data.."):

        pd.set_option("styler.render.max_elements", 647004)
    
    df = pd.read_csv('cleaned_diamonds.csv')

    # Se till att kategoriska variabler √§r r√§tt datatyp och ordnade
    cut_order = ['Fair', 'Good', 'Very Good', 'Premium', 'Ideal']
    color_order = ['D', 'E', 'F', 'G', 'H', 'I', 'J']  # D = b√§st, J = s√§mst
    clarity_order = ['IF', 'VVS1', 'VVS2', 'VS1', 'VS2', 'SI1', 'SI2', 'I1']  # IF = b√§st
    
    df['cut'] = pd.Categorical(df['cut'], categories=cut_order, ordered=True)
    df['color'] = pd.Categorical(df['color'], categories=color_order, ordered=True)
    df['clarity'] = pd.Categorical(df['clarity'], categories=clarity_order, ordered=True)
    
    # Ber√§kna volym
    df['volym'] = df['x'] * df['y'] * df['z']
    df['volume'] = df['volym']  # Alias f√∂r konsistens
    
    # Skapa ordinala versioner f√∂r analys s√• h√∂gre siffra = b√§ttre kvalitet
    df['cut_ord'] = df['cut'].cat.codes + 1
    df['color_ord'] = df['color'].cat.codes + 1  # D=1, E=2, ..., J=7 - men D √§r b√§st
    df['clarity_ord'] = df['clarity'].cat.codes + 1  # IF=1, VVS1=2, ..., I1=8 - men IF √§r b√§st
    
    # Korrigera ordinala s√• h√∂gre v√§rde = b√§ttre kvalitet
    df['color_ord'] = len(color_order) + 1 - df['color_ord']  # V√§nd s√• D=7, J=1
    df['clarity_ord'] = len(clarity_order) + 1 - df['clarity_ord']  # V√§nd s√• IF=8, I1=1

    # Skapa karatgrupper
    # Automatisk uppdelning med pandas cut
    df['carat_group_auto'] = pd.cut(df['carat'], bins=5, labels=['Mycket liten', 'Liten', 'Medium', 'Stor', 'Mycket stor'])
    
    # Manuell uppdelning med ordnad kategorisk variabel
    def categorize_carat(carat):
        if carat < 0.5:
            return 'Liten (< 0.5)'
        elif carat < 1.0:
            return 'Medium (0.5-1.0)'
        elif carat < 1.5:
            return 'Stor (1.0-1.5)'
        elif carat < 2.0:
            return 'Mycket stor (1.5-2.0)'
        else:
            return 'Exceptionell (>2.0)'
    
    df['carat_group'] = df['carat'].apply(categorize_carat)
    
    # G√∂r karatgrupper till ordnad kategorisk variabel
    carat_group_order = ['Liten (< 0.5)', 'Medium (0.5-1.0)', 'Stor (1.0-1.5)', 'Mycket stor (1.5-2.0)', 'Exceptionell (>2.0)']
    df['carat_group'] = pd.Categorical(df['carat_group'], categories=carat_group_order, ordered=True)

    return df

df = load_data()

# sidebar
st.sidebar.header("Navigering")
page = st.sidebar.radio(
    "V√§lj sida:",
    ["√ñversikt", "Numeriska Egenskaper", "Kategoriska Egenskaper", "Samband & Korrelationer", "Karatgruppsanalys", "Slutsats"]
)

st.sidebar.header("Filtrera Data")

min_carat, max_carat = st.sidebar.slider(
    "Karat intervall:",
    min_value=int(df['carat'].min()),
    max_value=int(df['carat'].max()),
    value=(int(df['carat'].min()), int(df['carat'].max()))
)

min_volume, max_volume = st.sidebar.slider(
    "Volymintervall:",
    min_value=int(df['volume'].min()),
    max_value=int(df['volume'].max()),
    value=(int(df['volume'].min()), int(df['volume'].max()))
)

min_price, max_price = st.sidebar.slider(
    "Prisintervall:",
    min_value=int(df['price'].min()),
    max_value=int(df['price'].max()),
    value=(int(df['price'].min()), int(df['price'].max()))
)

selected_cuts = st.sidebar.multiselect(
   "V√§lj slipningar:",
    options=df['cut'].unique(),
    default=df['cut'].unique() 
)

# Filtrera data baserat p√• val
filtered_df = df[
    (df['cut'].isin(selected_cuts)) &
    (df['price'] >= min_price) &
    (df['price'] <= max_price) &
    (df['volume'] >= min_volume) &
    (df['volume'] <= max_volume) &
    (df['carat'] >= min_carat) &
    (df['carat'] <= max_carat)
]

# Funktion f√∂r att skapa en figur
def create_figure(figsize=(10, 6)):
    fig, ax = plt.subplots(figsize=figsize)
    return fig, ax

# √ñVERSIKT
if page == "√ñversikt":

    st.title("Vad avg√∂r priset p√• en diamant?")
    st.info("""
    Vad √§r det som avg√∂r priset p√• en diamant? I denna analys ska vi f√∂rs√∂ka ta reda p√• det.
    Och om du inte kan allt om diamanter,
    s√• kolla in fliken nedan f√∂r att f√• en b√§ttre inblick.
    """)

    with st.expander("F√∂rst√• diamanternas v√§rld - De Fyra C:na", expanded=False):
        st.markdown("""
        Diamantpriss√§ttning baseras p√• **"De Fyra C:na"** - fyra kritiska kvalitetsfaktorer som tillsammans best√§mmer en diamants v√§rde:
        """)
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("""
            ### üî∏ **Carat (Karatvikt)**
            - Diamantens vikt, ursprungligen baserat p√• "carob seed" som var uniform i storlek
            - St√∂rre diamanter √§r exponentiellt dyrare (inte linj√§rt)
            
            ### ‚úÇÔ∏è **Cut (Slipning)** 
            - Kvaliteten p√• diamantens slipning p√•verkar ljusreflektion
            - Skala: Fair ‚Üí Good ‚Üí Very Good ‚Üí Premium ‚Üí **Ideal** (b√§st)
            - Ideal cut maximerar "brilliance" (ljusreflektion)
            """)
        
        with col2:
            st.markdown("""
            ### üåà **Color (F√§rg)**
            - F√§rgskala fr√•n **D (f√§rgl√∂s, b√§st)** till **J (synligt f√§rgad)**
            - D, E, F = F√§rgl√∂sa (dyrast)
            - G, H, I = N√§stan f√§rgl√∂sa  
            - J = Synligt f√§rgad (billigast i datasetet)
            
            ### üîç **Clarity (Klarhet)**
            - M√§ter interna och externa defekter
            - **IF** (Internally Flawless) = Perfekt
            - **VVS1, VVS2** = Very Very Slightly Included
            - **VS1, VS2** = Very Slightly Included  
            - **SI1, SI2** = Slightly Included
            - **I1** = Included (defekter synliga f√∂r blotta √∂gat)
            """)
        
        st.markdown("""
        ---
        ### üìê **Fysiska m√•tt**
        - **x, y, z**: L√§ngd, bredd, h√∂jd i millimeter
        - **Depth**: Djupprocent = `2 √ó z/(x + y)` - optimalt runt 60-62%
        - **Table**: Bordets bredd relativt diamantens bredaste punkt - optimalt 53-58%
        - **Volym**: `x √ó y √ó z` - ger verklig storleksuppfattning""")

    st.header("Datasets√∂versikt")
    st.info("""
    Vi g√•r vidare genom att titta p√• analyser av diamanter baserat p√• olika egenskaper som karatvikt, slipning, f√§rg och klarhet.
    Du kan utforska data genom att v√§lja olika visualiseringar i sidof√§ltet.
    """)
    
    # Visa r√•data
    st.subheader("R√•data")
    st.dataframe(filtered_df.head(100), use_container_width=True)
    
    # Sammanfattande statistik
    st.subheader("Sammanfattande Statistik")
    col1, col2 = st.columns(2)
    with col1:
        st.metric("Antal diamanter", f"{len(filtered_df)}")
        st.metric("Genomsnittspris", f"${filtered_df['price'].mean():.2f}")
        st.metric("Genomsnittlig karatvikt", f"{filtered_df['carat'].mean():.2f}")
    
    with col2:
        st.metric("Vanligaste slipningen", f"{filtered_df['cut'].value_counts().idxmax() if not filtered_df.empty else 'N/A'}")
        st.metric("Vanligaste f√§rgen", f"{filtered_df['color'].value_counts().idxmax() if not filtered_df.empty else 'N/A'}")
        st.metric("Prisintervall", f"${filtered_df['price'].min()} - ${filtered_df['price'].max()}")

    # Beskrivande statistik - ta bort price_predicted om den finns
    st.subheader("Beskrivande Statistik f√∂r Numeriska Egenskaper")
    desc_df = filtered_df.describe().T
    # Ta bort price_predicted om den finns
    if 'price_predicted' in desc_df.index:
        desc_df = desc_df.drop('price_predicted')
    st.dataframe(desc_df, use_container_width=True)

    # NUMERISKA EGENSKAPER
elif page == "Numeriska Egenskaper":
    st.header("Analys av Numeriska Egenskaper")
    
    st.info("""
    *"Hur ser f√∂rdelningen ut f√∂r olika egenskaper hos diamanter?"*

    H√§r unders√∂ker vi egenskaper som karatvikt, pris och fysiska dimensioner. Genom att titta p√• histogram och boxplots kan vi uppt√§cka m√∂nster som:

    - De flesta diamanter i datan √§r ganska sm√• (under 1 karat)
    - Priset √§r ofta snedf√∂rdelat ‚Äì det finns m√•nga billigare och n√•gra f√• extremt dyra
    - N√•gra utliggare sticker ut ‚Äì de kan vara exceptionellt stora eller unika diamanter

    Vi anv√§nder detta som grund f√∂r att f√∂rst√• vad som √§r "normalt" i datam√§ngden.
    """)
    
    # V√§lj variabel
    numeric_var = st.selectbox(
        "V√§lj numerisk variabel att analysera:",
        options=['carat', 'price', 'volym']
    )
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader(f"Histogram √∂ver {numeric_var}")
        fig, ax = create_figure()
        sns.histplot(filtered_df[numeric_var], kde=True, ax=ax)
        ax.set_title(f'F√∂rdelning av {numeric_var}')
        st.pyplot(fig)
    
    with col2:
        st.subheader(f"Boxplot f√∂r {numeric_var}")
        fig, ax = create_figure()
        sns.boxplot(y=filtered_df[numeric_var], ax=ax)
        ax.set_title(f'Boxplot av {numeric_var}')
        st.pyplot(fig)
    
    # Beskrivande statistik f√∂r den valda variabeln
    st.subheader(f"Statistik f√∂r {numeric_var}")
    stats = filtered_df[numeric_var].describe()
    stat_col1, stat_col2, stat_col3, stat_col4 = st.columns(4)
    
    with stat_col1:
        st.metric("Medelv√§rde", f"{stats['mean']:.2f}")
    with stat_col2:
        st.metric("Median", f"{stats['50%']:.2f}")
    with stat_col3:
        st.metric("Min", f"{stats['min']:.2f}")
    with stat_col4:
        st.metric("Max", f"{stats['max']:.2f}")
    
    # L√§gg till insikter baserat p√• variabel
    if numeric_var == 'price':
        st.info("""
        **Insikter om pris:**
        - Prisf√∂rdelningen √§r ofta h√∂gersnedst√§lld (m√•nga billiga, f√• dyra)
        - Outliers representerar exceptionellt dyra diamanter
        """)
    elif numeric_var == 'carat':
        st.info("""
        **Insikter om karatvikt:**
        - De flesta diamanter √§r relativt sm√• (under 1 karat)
        - Stora diamanter (>2 karat) √§r mycket s√§llsynta
        """)
    elif numeric_var == 'volym':
        st.info("""
        **Insikter om volym:**
        - Volym korrelerar starkt med karatvikt
        - Extremv√§rden kan indikera onormala proportioner
        """)

      # KATEGORISKA EGENSKAPER
elif page == "Kategoriska Egenskaper":
    st.header("Analys av Kategoriska Egenskaper")
    
    st.info("""
    *"Spelar diamantens kvalitet n√•gon roll f√∂r priset?"*

    H√§r fokuserar vi p√• de egenskaper som ofta kr√§ver expertbed√∂mning:

    - **Slipning (Cut):** hur v√§l diamanter reflekterar ljus
    - **F√§rg (Color):** f√§rgl√∂sa diamanter √§r generellt mer eftertraktade
    - **Klarhet (Clarity):** hur m√•nga inre fel och ytfel diamanten har

    H√§r kan vi med hj√§lp av slidern till v√§nster, titta p√• f√∂rdelningen av diamanter i olika karatintervall till exempel.
    """)
    
    # V√§lj variabel
    cat_var = st.selectbox(
        "V√§lj kategorisk variabel att analysera:",
        options=['cut', 'color', 'clarity']
    )
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader(f"Stapeldiagram f√∂r {cat_var}")
        fig, ax = create_figure()
        cat_counts = filtered_df[cat_var].value_counts().sort_index()
        sns.barplot(
        x=cat_counts.index,
        y=cat_counts.values,
        hue=cat_counts.index,           # F√§rg per kategori
        palette='plasma',               # F√§rgstark palett
        legend=False,
        ax=ax
        )
    
        ax.set_title(f'Antal diamanter per {cat_var}')
        ax.set_xlabel(cat_var.capitalize())
        ax.set_ylabel("Antal")
        ax.tick_params(axis='x', rotation=45)
        st.pyplot(fig)
    
    with col2:
        st.subheader(f"F√∂rdelning av {cat_var}")
        # Skapa en tabell ist√§llet f√∂r cirkeldiagram
        cat_counts = filtered_df[cat_var].value_counts().sort_index()
        counts_df = pd.DataFrame({
            f'{cat_var.capitalize()}': cat_counts.index,
            'Antal': cat_counts.values,
            'Procent': (cat_counts.values / cat_counts.sum() * 100).round(1)
        })
        st.dataframe(counts_df, use_container_width=True, hide_index=True)
    
    # Genomsnittligt pris per kategori
    st.subheader(f"Genomsnittspris per {cat_var}")
    avg_price = filtered_df.groupby(cat_var)['price'].mean().sort_values(ascending=False)
    
    fig, ax = create_figure(figsize=(10, 5))
    sns.barplot(
    x=avg_price.index,
    y=avg_price.values,
    hue=avg_price.index,      # F√§rg per kategori
    palette='plasma',         # F√§rgpalett
    dodge=False,              # Viktigt f√∂r att inte separera staplarna
    legend=False,
    ax=ax
    )

    ax.set_title(f'Genomsnittspris per {cat_var}')
    ax.set_ylabel('Genomsnittspris (USD)')
    ax.set_xlabel(cat_var.capitalize())
    ax.tick_params(axis='x', rotation=45)

    st.pyplot(fig)
    
    # L√§gg till insikter baserat p√• variabel
    if cat_var == 'cut':
        st.markdown("""
        **Insikter om slipning:**
        - "Ideal" och "Premium" cut har ofta h√∂gst pris
        - Slipningskvalitet p√•verker hur ljuset reflekteras
        - "Fair" cut √§r billigast men mindre attraktiv
        """)
    elif cat_var == 'color':
        st.markdown("""
        **Insikter om f√§rg:**
        - D, E, F √§r f√§rgl√∂sa och dyrast
        - G, H, I √§r n√§stan f√§rgl√∂sa 
        - J √§r synligt f√§rgad och billigast
        """)
    elif cat_var == 'clarity':
        st.markdown("""
        **Insikter om klarhet:**
        - IF (Internally Flawless) √§r perfekt och dyrast
        - VS1, VS2 har sm√• defekter synliga under f√∂rstoring
        - SI1, SI2 har defekter synliga f√∂r tr√§nat √∂ga
        """)

elif page == "Samband & Korrelationer":
    st.header("Samband och Korrelationer")

    st.info("""
    I spridningsdiagrammet kan vi lite b√§ttre se (√§ven om det √§r plottrigt)
    hur kvaliteten (color, cut, clarity) minskar desto st√∂rre diamanten √§r. Vi kan √§ven se att "depth" och "table"
    inte har n√•gon korrelation alls med priset, medan volymen har en stark korrelation, vilket
    vi √§ven kan se i korrelationsmatrisen.
    """)

    # Spridningsdiagram
    st.subheader("Spridningsdiagram")
    x_var = st.selectbox("V√§lj X-variabel:", options=['carat', 'depth', 'table', 'x', 'y', 'z', 'volym'])
    y_var = st.selectbox("V√§lj Y-variabel:", options=['price', 'carat', 'depth', 'table', 'x', 'y', 'z', 'volym'], index=0)
    hue_var = st.selectbox("V√§lj gruppering (f√§rg):", options=[None, 'cut', 'color', 'clarity'])

    fig, ax = create_figure()
    if hue_var:
        sns.scatterplot(x=x_var, y=y_var, hue=hue_var, data=filtered_df, ax=ax)
    else:
        sns.scatterplot(x=x_var, y=y_var, data=filtered_df, ax=ax)

    ax.set_title(f'Samband mellan {x_var} och {y_var}')
    st.pyplot(fig)

    # Visa sparad korrelationsmatris som bild
    st.subheader("Korrelationsmatris")
    st.markdown("H√§r ser du sambanden mellan numeriska egenskaper. Fr√•n m√∂rkbl√• (svag korrelation) till m√∂rkr√∂d (stark korrelation).")
    st.image("korrelationsmatris.png", caption="Korrelationsmatris f√∂r numeriska variabler", use_container_width=True)

    # Korrelationstoppar
    st.subheader("Starkaste korrelationer")
    numeric_df = filtered_df.select_dtypes(include=[np.number])
    corr_matrix = numeric_df.corr()
    corr_unstack = corr_matrix.unstack()
    corr_unstack = corr_unstack[corr_unstack < 1.0]  # Ta bort sj√§lvkorrelationer
    strongest_corr = corr_unstack.abs().sort_values(ascending=False).head(5)

    for i, (pair, corr_value) in enumerate(strongest_corr.items()):
        var1, var2 = pair
        st.write(f"{i+1}. {var1} - {var2}: {corr_value:.3f}")


    # KARATGRUPPSANALYS
elif page == "Karatgruppsanalys":
    st.header("Karatgruppsanalys")

    st.info("""
    *"√Ñr st√∂rre diamanter alltid b√§ttre?"*

    Vi delar upp diamanterna i olika viktklasser och uppt√§cker ett intressant m√∂nster:

    - **Ju st√∂rre diamant, desto h√∂gre pris** ‚Äì men...
    - **Kvaliteten (cut, clarity, color) sjunker ofta n√§r vikten √∂kar**

    Det tyder p√• att st√∂rre diamanter ofta g√∂rs av l√§gre kvalitet r√•material ‚Äì vilket kan bero p√• att det √§r sv√•rare att hitta stora bitar med perfekt klarhet.

    Det finns allts√• en avv√§gning: vill du ha storlek eller h√∂g kvalitet?
    """)
    
    # Automatisk karatgruppsindelning
    st.subheader("Automatisk karatgruppsindelning")
    carat_counts_auto = filtered_df['carat_group_auto'].value_counts().sort_index()
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("Antal diamanter per karatgrupp (automatisk uppdelning)")
        fig_auto, ax_auto = create_figure()
        sns.barplot(x=carat_counts_auto.index.astype(str), y=carat_counts_auto.values, ax=ax_auto)
        ax_auto.set_xlabel("Karatgrupp")
        ax_auto.set_ylabel("Antal diamanter")
        ax_auto.set_title("Automatisk karatgruppsf√∂rdelning")
        ax_auto.tick_params(axis='x', rotation=45)
        st.pyplot(fig_auto)
    
    with col2:
        st.write("F√∂rdelning av karatgrupper")
        # Skapa en enklare tabell ist√§llet f√∂r cirkeldiagram
        counts_df = pd.DataFrame({
            'Karatgrupp': carat_counts_auto.index,
            'Antal': carat_counts_auto.values,
            'Procent': (carat_counts_auto.values / carat_counts_auto.sum() * 100).round(1)
        })
        st.dataframe(counts_df, use_container_width=True, hide_index=True)
    
    # Manuell karatgruppsindelning
    st.subheader("Manuell karatgruppsindelning")
    
    # Skapa gruppsummering med r√§tt ordning
    group_summary = filtered_df.groupby('carat_group', observed=False).agg({
        'price': ['mean', 'median', 'count'],
        'volume': 'mean',
        'clarity_ord': 'mean',
        'cut_ord': 'mean',
        'color_ord': 'mean'
    }).round(2)
    
    # Platta till kolumnnamnen
    group_summary.columns = ['mean_price', 'median_price', 'count', 'mean_volume', 'mean_clarity_ord', 'mean_cut_ord', 'mean_color_ord']
    group_summary = group_summary.reset_index()
    
    # Sortera enligt v√•r √∂nskade ordning
    carat_order = ['Liten (< 0.5)', 'Medium (0.5-1.0)', 'Stor (1.0-1.5)', 'Mycket stor (1.5-2.0)', 'Exceptionell (>2.0)']
    group_summary['carat_group'] = pd.Categorical(group_summary['carat_group'], categories=carat_order, ordered=True)
    group_summary = group_summary.sort_values('carat_group')
    
    st.write("Sammanfattning f√∂r manuellt definierade karatgrupper")
    st.dataframe(group_summary, use_container_width=True)
    
    # Visualiseringar f√∂r manuella grupper
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("Snittpris per karatgrupp")
        fig_price, ax_price = create_figure()
        sns.barplot(data=group_summary, x='carat_group', y='mean_price', ax=ax_price)
        ax_price.set_ylabel("Genomsnittspris (USD)")
        ax_price.set_xlabel("Karatgrupp")
        ax_price.set_title("Genomsnittligt pris per karatgrupp")
        ax_price.tick_params(axis='x', rotation=45)
        st.pyplot(fig_price)
    
    with col2:
        st.write("Antal diamanter per manuell karatgrupp")
        fig_count, ax_count = create_figure()
        sns.barplot(data=group_summary, x='carat_group', y='count', ax=ax_count)
        ax_count.set_ylabel("Antal diamanter")
        ax_count.set_xlabel("Karatgrupp")
        ax_count.set_title("Antal diamanter per karatgrupp")
        ax_count.tick_params(axis='x', rotation=45)
        st.pyplot(fig_count)
    
    # Detaljerad analys per karatgrupp
    st.subheader("Detaljerad analys per karatgrupp")
    
    # V√§lj karatgrupp f√∂r djupare analys
    selected_carat_group = st.selectbox(
        "V√§lj karatgrupp f√∂r detaljerad analys:",
        options=filtered_df['carat_group'].unique()
    )
    
    group_data = filtered_df[filtered_df['carat_group'] == selected_carat_group]
    
    if not group_data.empty:
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("Antal diamanter", len(group_data))
            st.metric("Genomsnittspris", f"${group_data['price'].mean():.2f}")
        
        with col2:
            st.metric("Medianpris", f"${group_data['price'].median():.2f}")
            st.metric("Genomsnittlig volym", f"{group_data['volume'].mean():.2f} mm¬≥")
        
        with col3:
            st.metric("Vanligaste slipning", group_data['cut'].mode().iloc[0] if not group_data['cut'].mode().empty else 'N/A')
            st.metric("Vanligaste f√§rg", group_data['color'].mode().iloc[0] if not group_data['color'].mode().empty else 'N/A')
        
        # Histogram f√∂r vald grupp
        st.write(f"Prisf√∂rdelning f√∂r {selected_carat_group}")
        fig_hist, ax_hist = create_figure()
        sns.histplot(group_data['price'], kde=True, ax=ax_hist)
        ax_hist.set_title(f'Prisf√∂rdelning f√∂r {selected_carat_group}')
        ax_hist.set_xlabel('Pris (USD)')
        st.pyplot(fig_hist)
    

    # Viktigt m√∂nster - l√§gg till insikt
    st.info("""
    
    **Liten diamant ‚Üí l√•gt pris, l√•g volym, h√∂g klarhet/slipning/f√§rg**
    
    **St√∂rre diamant ‚Üí h√∂gre pris, h√∂gre volym, men l√§gre klarhet/slipning/f√§rg**
    
    Detta visar att mindre diamanter ofta har h√∂gre kvalitet per karat, medan st√∂rre diamanter √§r dyrare men har l√§gre genomsnittlig kvalitet.
    """)
    
    # Visa m√∂nstret i form av trendanalys
    st.subheader("Trendanalys: Storlek vs Kvalitet")
    
    # Skapa trendvisualisering
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("**Pris & Volym trend (√∂kar med storlek)**")
        fig_trend1, ax_trend1 = create_figure()
        ax_trend1.plot(range(len(group_summary)), group_summary['mean_price'], 'o-', label='Genomsnittspris', color='green', linewidth=2)
        ax_trend1.set_xlabel('Karatgrupp (Liten ‚Üí Stor)')
        ax_trend1.set_ylabel('Pris (USD)', color='green')
        ax_trend1.tick_params(axis='y', labelcolor='green')
        ax_trend1.set_xticks(range(len(group_summary)))
        ax_trend1.set_xticklabels([g.split(' ')[0] for g in group_summary['carat_group']], rotation=45)
        
        # L√§gg till volym p√• sekund√§r y-axel
        ax2 = ax_trend1.twinx()
        ax2.plot(range(len(group_summary)), group_summary['mean_volume'], 's-', label='Volym', color='blue', linewidth=2)
        ax2.set_ylabel('Volym (mm¬≥)', color='blue')
        ax2.tick_params(axis='y', labelcolor='blue')
        
        ax_trend1.set_title('Pris & Volym √∂kar med storlek')
        st.pyplot(fig_trend1)
    
    with col2:
        st.write("**Kvalitet trend (minskar med storlek)**")
        fig_trend2, ax_trend2 = create_figure()
        ax_trend2.plot(range(len(group_summary)), group_summary['mean_clarity_ord'], 'o-', label='Klarhet', linewidth=2)
        ax_trend2.plot(range(len(group_summary)), group_summary['mean_cut_ord'], 's-', label='Slipning', linewidth=2)
        ax_trend2.plot(range(len(group_summary)), group_summary['mean_color_ord'], '^-', label='F√§rg', linewidth=2)
        ax_trend2.set_xlabel('Karatgrupp (Liten ‚Üí Stor)')
        ax_trend2.set_ylabel('Kvalitetspo√§ng (h√∂gre = b√§ttre)')
        ax_trend2.set_xticks(range(len(group_summary)))
        ax_trend2.set_xticklabels([g.split(' ')[0] for g in group_summary['carat_group']], rotation=45)
        ax_trend2.legend()
        ax_trend2.set_title('Kvalitet minskar med storlek')
        st.pyplot(fig_trend2)
    
    # Detaljerade rapporter f√∂r varje grupp
    st.subheader("Detaljerade rapporter per karatgrupp")
    
    for group in group_summary['carat_group']:
        sub = filtered_df[filtered_df['carat_group'] == group]
        if sub.empty:
            continue

        with st.expander(f"üîπ Grupp: {group}"):
            st.write(f"**Antal diamanter:** {len(sub)}")
            st.write(f"**Genomsnittspris:** ${sub['price'].mean():.2f}")
            st.write(f"**Medianpris:** ${sub['price'].median():.2f}")
            st.write(f"**Genomsnittlig volym:** {sub['volume'].mean():.2f} mm¬≥")
            st.write(f"**Genomsnittlig klarhet (ordinal):** {sub['clarity_ord'].mean():.2f}")
            st.write(f"**Genomsnittlig slipning (ordinal):** {sub['cut_ord'].mean():.2f}")
            st.write(f"**Vanligaste slipning:** {sub['cut'].mode().iloc[0] if not sub['cut'].mode().empty else 'N/A'}")
            st.write(f"**Genomsnittlig f√§rg (ordinal):** {sub['color_ord'].mean():.2f}")
            st.write(f"**Vanligaste f√§rg:** {sub['color'].mode().iloc[0] if not sub['color'].mode().empty else 'N/A'}")


else:
    st.header("Slutsats")

    st.info("""
    *"Vad har vi l√§rt oss?"*

Efter att ha analyserat tusentals diamanter ser vi tydligt att:

- **Karatvikt √§r den starkaste prisp√•verkande faktorn**
- **F√§rg, klarhet och slipning p√•verkar priset ‚Äì men i mindre grad**
- **St√∂rre diamanter tenderar att ha l√§gre genomsnittlig kvalitet**
""")